[{"path":"https://dsci-310-2025.github.io/predictdiabetes/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Code of Conduct","title":"Code of Conduct","text":"make clear expected, everyone participating project required conform Group 6’s Code Conduct. committed fostering open, inclusive, respectful environment participants project. welcome individuals backgrounds dedicated promoting culture diversity, equity, inclusion. believe diversity inclusivity leads stronger, effective teamwork members feel safe, valued, empowered contribute. members, contributors, leaders tolerate discrimination harassment kind pledge make participation community safe healthy experience. members Group 6 project team expected assist enforcement Code Conduct. reports reviewed team kept strictly confidential.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Code of Conduct","text":"Code Conduct applies spaces managed Group 6 including, limited , group meetings, email communication, pull request feedback, discussion boards (e.g. Github issues), social media, private messaging applications (e.g. Instagram) events Group 6 represented.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CODE_OF_CONDUCT.html","id":"a-statement-on-diversity-and-inclusivity","dir":"","previous_headings":"","what":"A Statement on diversity and inclusivity","title":"Code of Conduct","text":"dedicated providing welcoming supportive environment people, regardless background identity. tolerate discrimination harassment based characteristics include, limited , age, body size, visible invisible disability, level experience, education, socio-economic status, familial status, nationality, race, ethnicity, religion belief (lack thereof), personal appearance, genetic information sexual identity orientation.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CODE_OF_CONDUCT.html","id":"expected-behaviour","dir":"","previous_headings":"","what":"Expected behaviour","title":"Code of Conduct","text":"participants events communications expected show respect courtesy others. interactions strive professional regardless platform: either online -person. Examples behaviour contributes positive environment community include: Using welcoming inclusive language Treating everyone equal respect open differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Maintaining confidentiality reports harassment violations Code Conduct Acknowledging celebrating diversity forms","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CODE_OF_CONDUCT.html","id":"unacceptable-behaviour","dir":"","previous_headings":"","what":"Unacceptable behaviour","title":"Code of Conduct","text":"Examples unacceptable behavior participants platform event Group 6 represented include: Discriminatory, offensive, harmful language effect excluding people basis membership specific group Bullying intimidation kind, including limited physical verbal abuse, unwelcome attention, stalking Incitement violence, suicide, self-harm, causing someone fear safety Deliberately undermining contributions participants belittling work display sexual violent images Intentional repeated misgendering Microaggressions, whether intentional unintentional Sustained disruption meetings, events communications Excessive intoxication Nonconsensual physical contact Continuing initiate interaction (including photography recording) someone asked stop publication private communication without consent","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CODE_OF_CONDUCT.html","id":"consequences-for-unacceptable-behaviour","dir":"","previous_headings":"","what":"Consequences for unacceptable behaviour","title":"Code of Conduct","text":"Participants asked stop inappropriate behavior expected comply immediately. applies platform event Group 6 represented, either online -person. participant engages behavior violates Code Conduct, team may warn offender engage DSCI 310 Instructor investigate Code Conduct violation impose appropriate sanctions. Consequences may include temporary permanent removal project, bans project’s communication channels (e.g. Github issues, emails, private messaging applications, etc.), reports appropriate authorities cases legal violations.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CODE_OF_CONDUCT.html","id":"reporting-and-dealing-with-unacceptable-behaviour","dir":"","previous_headings":"","what":"Reporting and dealing with unacceptable behaviour","title":"Code of Conduct","text":"someone violates Code Conduct platform event Group 6 represented, either online -person, encourage report promptly members Group 6. current members Group 6 : Nicholas Tam, email : tsunlinicholastam[--]gmail.com Dua Khan, email : duakhan931[--]gmail.com Kaylee Li, email : lkyle888888[--]gmail.com Luke Huang, email : lukehmtn[--]gmail.com Contact email seen respective member listed . reports reviewed team respond way deem appropriate circumstances. Based severity violation, Instructor DSCI 310 may involved.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html Vox Media Coc available https://code--conduct.voxmedia.com/","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributions","title":"Contributions","text":"welcome contributions project! notice bug, feature request, please open issue . ’d like contribute feature bug fix, can fork clone repo submit pull request. -depth instructions, see . review pull requests within 7 days. contributors must abide code conduct.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CONTRIBUTING.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to Contribute","title":"Contributions","text":"Clone repository terminal Change working directory project folder Create new branch switch IMPORTANT: Branches must follow format <username>-<task_description>-<step_num> derived either main existing branch edit . Example good branch name: jane_doe-create-bar-plot-function-m3 Remember regularly pull changes origin main branch local main branch. ’re fixing bug adding feature, sure : Ensure changes break existing functionality Follow existing coding style guidelines project. applicable, add tests ensure functionality works expected. Update documentation, necessary (README.md, etc.). changes complete, commit descriptive message Push changes","code":"git clone https://github.com/DSCI-310-2025/predictdiabetes.git cd predictdiabetes git checkout -b <username>-<task_description>-<step_num> git push origin <branch-name>"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull Requests","title":"Contributions","text":"Add information extended decription necessary. Resolve merge conflicts pop Merge Editor VSCode; recklessly combine versions file together. Warning: .ipynb files work Merge Editor VSCode; please outline Google Docs first committing. pull request open, project maintainers review . may suggest changes improvements. open feedback ready make additional commits necessary. pull request reviewed, feel free merge commit main. Thank contribution!","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CONTRIBUTING.html","id":"reporting-issues-and-seeking-support","dir":"","previous_headings":"","what":"Reporting Issues and Seeking Support","title":"Contributions","text":"information seeking support, please see code conduct. Go “Issues” tab GitHub. Click “New issue”. Provide reasonably descriptive title elaborate description. necessary, provide additional sub-issues corresponding details concrete steps complete. issue/sub-issue completed, remember close .","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/CONTRIBUTING.html","id":"external-documentation","dir":"","previous_headings":"","what":"External Documentation","title":"Contributions","text":"README.md Code Conduct MIT License Creative Commons License","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/LICENSE-MIT.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 predictdiabetes authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/articles/predictdiabetes-vignette.html","id":"generate-plots","dir":"Articles","previous_headings":"","what":"Generate Plots","title":"predictdiabetes-vignette","text":"","code":"## Generate Bar Plots Using mtcars # First, convert variables to factors since mtcars stores them as numeric mtcars$cyl <- as.factor(mtcars$cyl) mtcars$gear <- as.factor(mtcars$gear) mtcars$am   <- as.factor(mtcars$am)  bar_plots <- categorical_bars(   data_frame = mtcars,   cat_vars = c(\"cyl\", \"gear\"),   target_col = \"am\",   title_size = 15,   axis_size = 20 )  ## Display one of the bar plots, e.g., for cyl: (bar_plots[[\"cyl\"]]) # Convert existing variables to factors. mtcars$cyl <- as.factor(mtcars$cyl) mtcars$gear <- as.factor(mtcars$gear)  # Create a binary categorical variable from 'mpg': # 'High' if mpg is at or above the median, and 'Low' otherwise. mtcars$mpg_cat <- ifelse(mtcars$mpg >= median(mtcars$mpg), \"High\", \"Low\") mtcars$mpg_cat <- as.factor(mtcars$mpg_cat) chi_results <- cramer_chi_results(   df = mtcars,    categorical_vars = c(\"cyl\", \"gear\"),    target_col = \"mpg_cat\" ) #> Warning in stats::chisq.test(tbl): Chi-squared approximation may be incorrect #> Warning in stats::chisq.test(tbl): Chi-squared approximation may be incorrect  # Display the resulting summary table. chi_results #> # A tibble: 2 × 7 #>   Variable Statistic    DF   p_value Expected_Min Expected_Max CramersV #>   <chr>        <dbl> <int>     <dbl>        <dbl>        <dbl>    <dbl> #> 1 cyl           22.5     2 0.0000128         3.28         7.44    0.839 #> 2 gear          13.9     2 0.000977          2.34         7.97    0.658"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"dkln klht. Author, maintainer.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"klht d (2025). predictdiabetes: Package (One Line, Title Case). R package version 0.0.0.9000, https://dsci-310-2025.github.io/predictdiabetes/.","code":"@Manual{,   title = {predictdiabetes: What the Package Does (One Line, Title Case)},   author = {dkln klht},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://dsci-310-2025.github.io/predictdiabetes/}, }"},{"path":[]},{"path":"https://dsci-310-2025.github.io/predictdiabetes/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"What the Package Does (One Line, Title Case)","text":"goal predictdiabetes provide functions useful developing logistic regression models. package orginally designed logistic regression prediction model diabetes risk based BRFSS health indicators, package designed applicable models.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"What the Package Does (One Line, Title Case)","text":"na_count_type: Given input data frame, check number missing values (NA), number distinct values, data type variable. category_target: Given input dataframe categorical variable, return number proportion instances category value, alphabetical (characters logical) numerical (integers) order categorical_bars: Create list bar plots categorical variable data frame. info_gain: Calculate sort information gain feature selection. plots_grid: Combine list mulitple lists ggplot2 objects single grid layout using patchwork. number columns grid can specified num_cols. cramer_chi_results: Runs chi-squared tests calculates Cramer’s V independently variable given data frame. lr_pipeline: Trains fits logistic regression model cross-validates optimal hyperparameter values. roc_plot: Creates ROC curve plot saves specified file path. cm_plot: Creates confusion matrix plot saves specified file path. coeff_plot: Plot LASSO classification model coefficients.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version predictdiabetes GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"DSCI-310-2025/predictdiabetes\")"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"What the Package Does (One Line, Title Case)","text":"Begin EDA checking number NAs, number distinct values data type column. building model, likely want understand proportions binary variable interest within category categorical variables. predictdiabetes::categorical_bars() can used provide plots every provided categorical variable.  building LASSO model, ROC plots beneficial evaluate model perform.","code":"library(predictdiabetes)  na_count_type(mtcars) #>                   mpg      cyl      disp     hp       drat     wt       #> NA_Count          \"0\"      \"0\"      \"0\"      \"0\"      \"0\"      \"0\"      #> Distinct_Count    \"25\"     \"3\"      \"27\"     \"22\"     \"22\"     \"29\"     #> Current_Data_Type \"double\" \"double\" \"double\" \"double\" \"double\" \"double\" #>                   qsec     vs       am       gear     carb     #> NA_Count          \"0\"      \"0\"      \"0\"      \"0\"      \"0\"      #> Distinct_Count    \"30\"     \"2\"      \"2\"      \"3\"      \"6\"      #> Current_Data_Type \"double\" \"double\" \"double\" \"double\" \"double\" #>                   mpg      cyl      disp     hp       drat     wt       #> NA_Count          \"0\"      \"0\"      \"0\"      \"0\"      \"0\"      \"0\"      #> Distinct_Count    \"25\"     \"3\"      \"27\"     \"22\"     \"22\"     \"29\"     #> Current_Data_Type \"double\" \"double\" \"double\" \"double\" \"double\" \"double\" #>                   qsec     vs       am       gear     carb     #> NA_Count          \"0\"      \"0\"      \"0\"      \"0\"      \"0\"      #> Distinct_Count    \"30\"     \"2\"      \"2\"      \"3\"      \"6\"      #> Current_Data_Type \"double\" \"double\" \"double\" \"double\" \"double\" # Generate bar plots for categorical variables from the mtcars dataset mtcars$cyl <- as.factor(mtcars$cyl) mtcars$gear <- as.factor(mtcars$gear) mtcars$am   <- as.factor(mtcars$am)  bar_plots <- categorical_bars(   data_frame = mtcars,   cat_vars = c(\"cyl\", \"gear\"),   target_col = \"am\",   title_size = 15,   axis_size = 20 )  ## Display one of the bar plots, e.g., for cyl: (bar_plots[[\"cyl\"]]) set.seed(42)  test_data <- data.frame(   Diabetes_binary = factor(sample(c(0, 1), 100, replace = TRUE)),   .pred_1 = runif(100) )  output_plot <- roc_plot(   test_data,   \"Diabetes_binary\",   \".pred_1\",   0.85,   tempfile(fileext = \".png\")  # This doesn't create an actual file ) #> Saving 7 x 7 in image  plot(output_plot)"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/categorical_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"List of Bar Plots — categorical_bars","title":"List of Bar Plots — categorical_bars","text":"Create list bar plots categorical variable data frame. proportions categorical variable grouped different fill color.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/categorical_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of Bar Plots — categorical_bars","text":"","code":"categorical_bars(   data_frame,   cat_vars,   target_col,   title_size = 30,   axis_size = 35,   legend_key_size = 1,   legend_text_size = 12,   legend_title_size = 12 )"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/categorical_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of Bar Plots — categorical_bars","text":"data_frame data frame data frame extension (e.g. tibble). cat_vars vector containing string name(s) categorical variable plot x-axis. target_col Column interest plot variable (object). title_size Size plot's title (Default = 30). axis_size Size plot's axes (Default = 35). legend_key_size Size legend key (Default = 1 cm). legend_text_size Size legend text (Default = 12). legend_title_size Size legend title (Default = 12).","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/categorical_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of Bar Plots — categorical_bars","text":"list containing ggplot2 object(s) (bar plots).","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/categorical_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of Bar Plots — categorical_bars","text":"","code":"if (FALSE) { # \\dontrun{   # Generate bar plots for categorical variables from the mtcars dataset   bar_plots <- categorical_bars(     data_frame = mtcars,     cat_vars = c(\"cyl\", \"gear\"),     target_col = \"am\",     title_size = 25,     axis_size = 20,     legend_key_size = 1.5,     legend_text_size = 14,     legend_title_size = 14   )   # Display the first bar plot   print(bar_plots[[\"cyl\"]]) } # }"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/category_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts and Proportions of Categorical Variables — category_target","title":"Counts and Proportions of Categorical Variables — category_target","text":"Given input dataframe categorical variable, return number proportion instances category value, alphabetical (characters logical) numerical (integers) order","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/category_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts and Proportions of Categorical Variables — category_target","text":"","code":"category_target(data_frame, cat_var)"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/category_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts and Proportions of Categorical Variables — category_target","text":"data_frame data frame data frame extension (e.g. tibble). cat_var categorical variable (object) within data_frame.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/category_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts and Proportions of Categorical Variables — category_target","text":"data frame 1 rows per category 2 columns: Count: Number occurrances category cat_var. Proportion: Proportion category relative total number rows data frame.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/category_target.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts and Proportions of Categorical Variables — category_target","text":"","code":"if (FALSE) { # \\dontrun{   category_target(ToothGrowth, ToothGrowth$supp) } # }"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/cm_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and save a confusion matrix plot — cm_plot","title":"Create and save a confusion matrix plot — cm_plot","text":"function creates confusion matrix plot saves specified file path.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/cm_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and save a confusion matrix plot — cm_plot","text":"","code":"cm_plot(conf_matrix_df, output_path)"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/cm_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and save a confusion matrix plot — cm_plot","text":"conf_matrix_df data frame tibble containing confusion matrix results. columns \"Prediction\", \"Truth\" \"Freq\". output_path character string specifying file path save confusion matrix plot.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/cm_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and save a confusion matrix plot — cm_plot","text":"ggplot2 object displaying tile heatmap confusion matrix.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/cm_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and save a confusion matrix plot — cm_plot","text":"","code":"# Example usage: if (FALSE) { # \\dontrun{ # Assuming you have a confusion matrix object from yardstick::conf_mat cm_plot(cm, \"confusion_matrix_plot.png\") } # }"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/coeff_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot LASSO Classification Model Coefficients — coeff_plot","title":"Plot LASSO Classification Model Coefficients — coeff_plot","text":"function extracts coefficients fitted LASSO classification model contained within workflow object, arranges importance, creates bar plot visualize coefficients.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/coeff_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot LASSO Classification Model Coefficients — coeff_plot","text":"","code":"coeff_plot(model)"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/coeff_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot LASSO Classification Model Coefficients — coeff_plot","text":"model workflow object containing trained LASSO model.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/coeff_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot LASSO Classification Model Coefficients — coeff_plot","text":"ggplot object visualizes LASSO model coefficients bar plot.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/coeff_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot LASSO Classification Model Coefficients — coeff_plot","text":"","code":"# Assuming you have a trained workflow named 'lasso_model' if (FALSE) { # \\dontrun{ coeff_plot(lasso_model) } # }"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/cramer_chi_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Chi-Squared Test and Cramer's V Results — cramer_chi_results","title":"Table of Chi-Squared Test and Cramer's V Results — cramer_chi_results","text":"Runs chi-squared tests calculates Cramer's V independently variable given data frame","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/cramer_chi_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Chi-Squared Test and Cramer's V Results — cramer_chi_results","text":"","code":"cramer_chi_results(df, categorical_vars, target_col)"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/cramer_chi_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of Chi-Squared Test and Cramer's V Results — cramer_chi_results","text":"df data frame data frame extension (e.g. tibble). categorical_vars vector containing string name(s) categorical variable data frame. target_col string specifying categorical variable chi-squared tests performed.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/cramer_chi_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of Chi-Squared Test and Cramer's V Results — cramer_chi_results","text":"Data frame 1 row per variable 7 columns: Variable: Name categorical variable. Statistic: Chi-squared test statistic. DF: Degrees freedom. p_value: p-value chi-squared test. Expected_Min: Minimum expected value. Expected_Max: Maximum expected value. CramersV: Cramer's V statistic.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/cramer_chi_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of Chi-Squared Test and Cramer's V Results — cramer_chi_results","text":"","code":"if (FALSE) { # \\dontrun{   cramer_chi_results(mtcars, c(\"cyl\", \"gear\"), \"mpg\") } # }"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/info_gain.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and Sort Information Gain for Feature Selection — info_gain","title":"Calculate and Sort Information Gain for Feature Selection — info_gain","text":"function calculates information gain predictor respect target variable returns data frame sorted importance.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/info_gain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and Sort Information Gain for Feature Selection — info_gain","text":"","code":"info_gain(data, formula)"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/info_gain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and Sort Information Gain for Feature Selection — info_gain","text":"data data frame containing predictors target variable. formula formula specifying target predictors (e.g., Diabetes_binary ~ .).","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/info_gain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and Sort Information Gain for Feature Selection — info_gain","text":"tibble two columns: Variable Information_Gain, sorted descending order.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/info_gain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and Sort Information Gain for Feature Selection — info_gain","text":"","code":"if (FALSE) { # \\dontrun{ info_gain_table <- info_gain(mtcars, am ~ .) } # }"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/lr_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Logistic Regression Binary Classification Pipeline — lr_pipeline","title":"Logistic Regression Binary Classification Pipeline — lr_pipeline","text":"Trains fits logistic regression model cross-validates optimal hyperparameter values.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/lr_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic Regression Binary Classification Pipeline — lr_pipeline","text":"","code":"lr_pipeline(   data,   target_col,   vfolds = 5,   grid_size = 10,   tuning_metric,   output_path )"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/lr_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic Regression Binary Classification Pipeline — lr_pipeline","text":"data data frame data frame extension (e.g. tibble). target_col string specifying variable interest. vfolds number specifying amount folds used k-fold cross-validation (Default = 5). grid_size number specifying penalty values test model tuning (Default = 10). tuning_metric string specifying metric used select optimal model (e.g. \"recall\"). output_path String path location save model RDS object.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/lr_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logistic Regression Binary Classification Pipeline — lr_pipeline","text":"RDS file containing workflow object","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/lr_pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logistic Regression Binary Classification Pipeline — lr_pipeline","text":"","code":"if (FALSE) { # \\dontrun{   lr_pipeline(mtcars, \"am\", vfolds = 5, grid_size = 10, tuning_metric = \"recall\",   output_path = \"lasso_tuned_wflow.RDS\") } # }"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/na_count_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Data Frame Columns — na_count_type","title":"Summarise Data Frame Columns — na_count_type","text":"Given input data frame, function checks number missing values (NA), number distinct values, data type variable.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/na_count_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Data Frame Columns — na_count_type","text":"","code":"na_count_type(data_frame)"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/na_count_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Data Frame Columns — na_count_type","text":"data_frame data frame data frame extension (e.g. tibble).","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/na_count_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Data Frame Columns — na_count_type","text":"Data frame 1 row per variable 3 columns: NA_Count: Number \"NA\" values within variable. Distinct_Count: Number distinct values variable. Current_Data_Type: Current data type variable.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/na_count_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise Data Frame Columns — na_count_type","text":"","code":"if (FALSE) { # \\dontrun{   # Summarize columns in the mtcars dataset   na_count_type(mtcars) } # }"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/plots_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid of Plots — plots_grid","title":"Grid of Plots — plots_grid","text":"Facet list ggplot2 bar plot objects single grid layout using patchwork. number columns grid can specified num_cols.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/plots_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grid of Plots — plots_grid","text":"","code":"plots_grid(bar_plots, num_cols = 3)"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/plots_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grid of Plots — plots_grid","text":"bar_plots list ggplot2 bar plot objects. num_cols number columns grid (Default = 3).","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/plots_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid of Plots — plots_grid","text":"patchwork / ggplot2 object showing input plots arranged.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/plots_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid of Plots — plots_grid","text":"","code":"if (FALSE) { # \\dontrun{   # Generate example bar plots   bar_plots <- categorical_bars(     data_frame = mtcars,     cat_vars = c(\"cyl\", \"gear\"),     target_col = \"am\"     )        # Combine plots into a grid   grid_plot <- plots_grid(bar_plots, num_cols = 2) } # }"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/roc_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates and saves an ROC curve plot — roc_plot","title":"Creates and saves an ROC curve plot — roc_plot","text":"function creates ROC curve plot given classification model saves specified file path.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/roc_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates and saves an ROC curve plot — roc_plot","text":"","code":"roc_plot(   model_outputs,   true_class,   predicted_probs,   roc_auc_value,   output_path )"},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/roc_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates and saves an ROC curve plot — roc_plot","text":"model_outputs data frame tibble containing model outputs. true_class character string specifying column actual class labels. predicted_probs character string specifying column predicted probabilities. roc_auc_value numeric value representing AUC model evaluation. output_path character string specifying file path save ROC plot.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/roc_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates and saves an ROC curve plot — roc_plot","text":"ggplot2 object ROC curve.","code":""},{"path":"https://dsci-310-2025.github.io/predictdiabetes/reference/roc_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates and saves an ROC curve plot — roc_plot","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have model outputs, true labels, predicted probabilities, and AUC value roc_plot(lasso_model_outputs, \"Diabetes_binary\", \".pred_1\",          lasso_metrics$.estimate[lasso_metrics$.metric == \"roc_auc\"],          \"roc_curve_plot.png\") } # }"}]
